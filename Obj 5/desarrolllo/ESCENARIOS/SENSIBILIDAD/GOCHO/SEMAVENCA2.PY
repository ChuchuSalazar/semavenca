import io
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from scipy.optimize import fsolve
import math

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="SEMAVENCA - An√°lisis Financiero",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Header con copyright
st.markdown("""
    <div style="background: linear-gradient(90deg, #1f4e79, #2e86ab); padding: 20px; border-radius: 10px; margin-bottom: 30px;">
        <h1 style="color: white; text-align: center; margin: 0;">üìä SEMAVENCA</h1>
        <p style="color: white; text-align: center; margin: 5px 0 0 0; font-size: 14px;">¬© 2024 SEMAVENCA - An√°lisis de Inversi√≥n y Flujo de Caja</p>
    </div>
""", unsafe_allow_html=True)


def calcular_tir(flujos_caja):
    """Calcular TIR usando m√©todo num√©rico"""
    def van_eq(tasa):
        try:
            return sum([flujo / (1 + tasa)**i for i, flujo in enumerate(flujos_caja)])
        except:
            return float('inf')

    try:
        tir = fsolve(van_eq, 0.1)[0]
        return tir if abs(van_eq(tir)) < 1e-6 and tir > -0.99 else None
    except:
        return None


def calcular_van(flujos_caja, tasa_descuento):
    """Calcular VAN"""
    try:
        return sum([flujo / (1 + tasa_descuento)**i for i, flujo in enumerate(flujos_caja)])
    except:
        return 0


# Sidebar para inputs
st.sidebar.header("‚öôÔ∏è Par√°metros de Inversi√≥n")

# Inputs principales
inversion_inicial = st.sidebar.number_input(
    "üí∞ Inversi√≥n Inicial (II)",
    min_value=0.0,
    value=2482400.0,
    step=10000.0,
    format="%.2f"
)

ingreso_mensual_inicial = st.sidebar.number_input(
    "üìà Ingreso Mensual Inicial (IM)",
    min_value=0.0,
    value=415872.0,
    step=1000.0,
    format="%.2f"
)

tasa_variacion = st.sidebar.number_input(
    "üìä Tasa de Variaci√≥n Intermensual (%)",
    min_value=-10.0,
    max_value=20.0,
    value=2.0,
    step=0.1,
    format="%.2f"
) / 100

# CALCULAR TIR PREVIAMENTE
# Generar ingresos mensuales para 48 meses (meses 1-48)
ingresos_mensuales_temp = []
for mes in range(1, 49):  # Meses 1-48
    if mes <= 3:  # Primeros 3 meses sin ingresos
        ingresos_mensuales_temp.append(0)
    else:  # A partir del mes 4
        ingreso = ingreso_mensual_inicial * (1 + tasa_variacion) ** (mes - 4)
        ingresos_mensuales_temp.append(ingreso)

# Construir flujos de caja para c√°lculo de TIR
flujos_caja_temp = [-inversion_inicial] + ingresos_mensuales_temp

# Calcular TIR ANTES de mostrar el campo
tir_previa = calcular_tir(flujos_caja_temp)

# La tasa de descuento inicial es equivalente a la TIR
tasa_descuento = st.sidebar.number_input(
    "üéØ Tasa de Inter√©s/Descuento (%) - TIR Calculada",
    min_value=0.0,
    max_value=50.0,
    value=tir_previa * 100 if tir_previa else 10.0,
    step=0.1,
    format="%.2f",
    help=f"TIR calculada autom√°ticamente: {tir_previa*100:.2f}%" if tir_previa else "TIR no calculable"
) / 100

# Recalcular con los valores finales (por si el usuario cambi√≥ la tasa)
# Generar ingresos mensuales para 48 meses (meses 1-48)
ingresos_mensuales = []
for mes in range(1, 49):  # Meses 1-48
    if mes <= 3:  # Primeros 3 meses sin ingresos
        ingresos_mensuales.append(0)
    else:  # A partir del mes 4
        ingreso = ingreso_mensual_inicial * (1 + tasa_variacion) ** (mes - 4)
        ingresos_mensuales.append(ingreso)

# Construir flujos de caja (incluye mes 0)
flujos_caja = [-inversion_inicial] + ingresos_mensuales  # Mes 0 + Meses 1-48

# Calcular TIR para usar como default en tasa de descuento
tir_calculada = calcular_tir(flujos_caja)

# La tasa de descuento inicial es equivalente a la TIR
tasa_descuento = st.sidebar.number_input(
    "üéØ Tasa de Descuento (%) - Inicial = TIR",
    min_value=0.0,
    max_value=50.0,
    value=tir_calculada * 100 if tir_calculada else 10.0,
    step=0.1,
    format="%.2f",
    help="Valor inicial basado en la TIR calculada"
) / 100

# Calcular m√©tricas
ingreso_acumulado = [0] + \
    list(np.cumsum(ingresos_mensuales))  # Mes 0 + acumulados
monto_amortizado = [x - inversion_inicial for x in ingreso_acumulado]
tir = calcular_tir(flujos_caja)
van = calcular_van(flujos_caja, tasa_descuento)

# Encontrar mes de recuperaci√≥n
mes_recuperacion = None
for i, monto in enumerate(monto_amortizado):
    if monto >= 0:
        mes_recuperacion = i
        break

# Layout principal
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üìä An√°lisis de Flujo de Caja")

    # Crear DataFrame para la tabla
    df_resultados = pd.DataFrame({
        'Mes': range(0, 49),  # Meses 0-48
        'Ingreso Mensual': [0] + ingresos_mensuales,  # Mes 0 + Meses 1-48
        'Ingreso Acumulado': ingreso_acumulado,  # Mes 0 + acumulados
        'Monto Amortizado': monto_amortizado,  # IA - II
        'Flujo de Caja': flujos_caja  # Flujos completos
    })

    # Crear copia para valores num√©ricos
    df_numeric = df_resultados.copy()

    # Formatear valores monetarios para mostrar
    for col in ['Ingreso Mensual', 'Ingreso Acumulado', 'Monto Amortizado', 'Flujo de Caja']:
        df_resultados[col] = df_resultados[col].apply(lambda x: f"${x:,.2f}")

    # Mostrar tabla (primeros 20 meses)
    st.write("**Tabla de Flujos (Primeros 20 meses):**")
    st.dataframe(df_resultados.head(21), use_container_width=True)

with col2:
    st.subheader("üéØ M√©tricas Clave")

    # Mostrar TIR calculada
    if tir_previa:
        st.metric("TIR Calculada", f"{tir_previa*100:.2f}%",
                  delta="Calculada autom√°ticamente")
    else:
        st.metric("TIR Calculada", "No calculable")

    # M√©tricas en cards
    st.metric("VAN", f"${van:,.2f}",
              delta="Positivo" if van > 0 else "Negativo")

    st.metric("Tasa Descuento Actual", f"{tasa_descuento*100:.2f}%",
              delta=f"TIR: {tir_previa*100:.2f}%" if tir_previa else None)

    st.metric("Mes de Recuperaci√≥n",
              f"Mes {mes_recuperacion}" if mes_recuperacion else "No se recupera en 48 meses")

    st.metric("Inversi√≥n Inicial", f"${inversion_inicial:,.2f}")

    if ingreso_acumulado[-1] > 0:
        st.metric(
            "ROI Total", f"{((ingreso_acumulado[-1]/inversion_inicial)-1)*100:.1f}%")
    else:
        st.metric("ROI Total", "0.0%")

# Gr√°ficos
st.subheader("üìà Visualizaciones")

# Crear subplots
fig = make_subplots(
    rows=2, cols=2,
    subplot_titles=('Evoluci√≥n del Monto Amortizado', 'Ingresos Mensuales',
                    'Ingreso Acumulado vs Inversi√≥n', 'Flujo de Caja Mensual'),
    specs=[[{"secondary_y": False}, {"secondary_y": False}],
           [{"secondary_y": False}, {"secondary_y": False}]]
)

meses = list(range(0, 49))

# Gr√°fico 1: Monto Amortizado
fig.add_trace(
    go.Scatter(x=meses, y=df_numeric['Monto Amortizado'], name="Monto Amortizado",
               line=dict(color='red', width=3)),
    row=1, col=1
)
fig.add_hline(y=0, line_dash="dash", line_color="black", row=1, col=1)

# Gr√°fico 2: Ingresos Mensuales
fig.add_trace(
    go.Bar(x=meses[1:], y=df_numeric['Ingreso Mensual'][1:], name="Ingresos Mensuales",
           marker_color='lightblue'),
    row=1, col=2
)

# Gr√°fico 3: Ingreso Acumulado
fig.add_trace(
    go.Scatter(x=meses, y=df_numeric['Ingreso Acumulado'], name="Ingreso Acumulado",
               line=dict(color='green', width=3)),
    row=2, col=1
)
fig.add_hline(y=inversion_inicial, line_dash="dash", line_color="red",
              annotation_text="Inversi√≥n Inicial", row=2, col=1)

# Gr√°fico 4: Flujo de Caja
colors = ['red' if x < 0 else 'green' for x in df_numeric['Flujo de Caja']]
fig.add_trace(
    go.Bar(x=meses, y=df_numeric['Flujo de Caja'], name="Flujo de Caja",
           marker_color=colors),
    row=2, col=2
)

fig.update_layout(height=800, showlegend=False,
                  title_text="Dashboard de An√°lisis Financiero")
fig.update_xaxes(title_text="Meses")
fig.update_yaxes(title_text="Monto ($)")

st.plotly_chart(fig, use_container_width=True)

# An√°lisis y recomendaciones
st.subheader("üìã An√°lisis y Recomendaciones")

col1, col2, col3 = st.columns(3)

with col1:
    if van > 0:
        st.success("‚úÖ **VAN Positivo**: El proyecto genera valor")
    else:
        st.error("‚ùå **VAN Negativo**: El proyecto destruye valor")

with col2:
    if tir_previa and tir_previa > tasa_descuento:
        st.success(
            f"‚úÖ **TIR Superior**: {tir_previa*100:.2f}% > {tasa_descuento*100:.2f}%")
    elif tir_previa:
        st.error(
            f"‚ùå **TIR Inferior**: {tir_previa*100:.2f}% < {tasa_descuento*100:.2f}%")
    else:
        st.error("‚ùå **TIR No Calculable**")

with col3:
    if mes_recuperacion and mes_recuperacion <= 24:
        st.success(f"‚úÖ **Recuperaci√≥n R√°pida**: {mes_recuperacion} meses")
    elif mes_recuperacion:
        st.warning(f"‚ö†Ô∏è **Recuperaci√≥n Lenta**: {mes_recuperacion} meses")
    else:
        st.error("‚ùå **Sin Recuperaci√≥n** en el horizonte de 48 meses")

# Exportar datos
st.subheader("üíæ Exportar Resultados")

# Preparar datos para Excel
df_export = df_resultados.copy()
# Convertir formato de moneda a n√∫meros para Excel
for col in ['Ingreso Mensual', 'Ingreso Acumulado', 'Monto Amortizado', 'Flujo de Caja']:
    df_export[col] = df_numeric[col]  # Usar valores num√©ricos

# Agregar hoja de resumen
resumen_data = {
    'M√©trica': ['Inversi√≥n Inicial', 'TIR Calculada (%)', 'Tasa de Descuento (%)', 'VAN', 'Mes de Recuperaci√≥n', 'ROI Total (%)'],
    'Valor': [
        inversion_inicial,
        tir_previa * 100 if tir_previa else 0,
        tasa_descuento * 100,
        van,
        mes_recuperacion if mes_recuperacion else 'No se recupera',
        ((ingreso_acumulado[-1]/inversion_inicial)-1) *
        100 if ingreso_acumulado[-1] > 0 else 0
    ]
}
df_resumen = pd.DataFrame(resumen_data)

# Crear archivo Excel con m√∫ltiples hojas
output = io.BytesIO()
with pd.ExcelWriter(output, engine='openpyxl') as writer:
    df_export.to_excel(writer, sheet_name='Flujos_Detallados', index=False)
    df_resumen.to_excel(writer, sheet_name='Resumen_Metricas', index=False)

st.download_button(
    label="üì• Descargar An√°lisis Excel",
    data=output.getvalue(),
    file_name=f'analisis_financiero_semavenca_{pd.Timestamp.now().strftime("%Y%m%d_%H%M")}.xlsx',
    mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
)

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: gray;'>Desarrollado por SEMAVENCA ¬© 2024</div>",
    unsafe_allow_html=True
)
